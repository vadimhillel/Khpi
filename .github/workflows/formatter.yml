name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_lint:
    runs-on: ubuntu-latest
    env:
      CI_COMMIT_AUTHOR: ${{ github.event.repository.name }} Continuous Integration

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      # - name: Set up Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: "20.18.x"
      #     registry-url: "https://registry.npmjs.org"
      
      # - name: Install Node dependencies
      #   run: npm install

      # - name: Copy .env file
      #   run: cp .env.example .env

      - name: Format code with Black
        uses: rickstaa/action-black@v1
        with:
          black_args: "--exclude tests/ ."

      - name: Lint code with Flake8
        uses: py-actions/flake8@v2
        with:
          ignore: "F401,W503,E501"
          max-line-length: "120"

      # - name: Run Node lints
      #   run: npm run lint

      # - name: Run Python lints
      #   run: flask lint --check

      # - name: Run Python tests
      #   run: flask test

      - name: Check for modified files
        id: git-check
        run: |
          modified=$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)
          echo "modified=$modified" >> $GITHUB_ENV

      - name: Display event name
        run: echo "github.event_name=${{ github.event_name }}"
      
      - name: Notify on linting/formatting failure
        if: ${{ failure() }}
        run: echo "Formatting | linting failed. Review the changes."

      # Uncomment to enable automatic pushing if needed
      # - name: Push changes
      #   if: env.is-auto-commit == false && github.event_name != 'pull_request'
      #   run: |
      #     git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
      #     git push

      - name: Comment on pull request
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const response = await github.rest.pulls.listFiles({ owner: context.repo.owner, repo: context.repo.repo, pull_number: context.issue.number });
            const files = response.data.map(file => file.filename);
            const modifiedFiles = files.filter(file => file.includes('.py') && file.startsWith('app/'));
            
            if (modifiedFiles.length > 0) {
              const body = `Linting found issues in the following files:\n${modifiedFiles.join('\n')}\n\nPlease review and fix the issues.`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }